# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Python application

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]
 
permissions:
  contents: read

jobs:
  build:

    runs-on: ubuntu-latest

    env:
      #DataBase AWS RDS :
      DB_HOST: ${{ vars.DB_HOST }}
      DB_USER: ${{ secrets.DB_USER }}
      DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
      DB_NAME: ${{ vars.DB_NAME }}

      #Auth API :
      PWD_DB_WILLY: ${{ secrets.PWD_DB_WILLY }}
      PWD_DB_DJAMEL: ${{ secrets.PWD_DB_DJAMEL }}
      PWD_DB_JONATHAN: ${{ secrets.PWD_DB_JONATHAN }}
      PWD_DB_ROOT: ${{ secrets.PWD_DB_ROOT }}
      PWD_DB_ADMIN: ${{ secrets.PWD_DB_ADMIN }}

      #Bucket AWS S3 : 
      AWS_ADMIN_KEY_ID: ${{ secrets.AWS_ADMIN_KEY_ID }} 
      AWS_ADMIN_KEY: ${{ secrets.AWS_ADMIN_KEY }} 
      AWS_USER_KEY_ID: ${{ secrets.AWS_USER_KEY_ID }} 
      AWS_USER_KEY: ${{ secrets.AWS_USER_KEY }} 
      AWS_S3_REGION: ${{ vars.AWS_S3_REGION }} 
      AWS_S3_BUCKET_NAME: ${{ vars.AWS_S3_BUCKET_NAME }} 

    steps:
    - uses: actions/checkout@v3
    - name: Set up Python 3.11
      uses: actions/setup-python@v3
      with:
        python-version: "3.11"
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 pytest
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    - name: Test api_user with pytest
      run: |
        docker compose run api_user pytest -v
    - name: Test api_admin with pytest
      run: |
        docker compose run api_admin pytest -v
    - name: Launch docker compose
      run: |
        docker compose up -d
        sleep 10
    - name: Close docker compose
      run: |
        docker compose down
